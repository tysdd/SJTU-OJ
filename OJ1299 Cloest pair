#include <iostream>
using namespace std;
typedef long long LL;
const long long INF = 1e18;
LL pow_2(LL x) {
    return x*x;
}

struct point {
    LL x, y;
    point() = default;
    point(LL _x, LL _y) : x(_x), y(_y) {}
};

long long distance_2(const point& v1,const point& other){
    // TODO: implement distance_2
    return pow_2(v1.x - other.x) + pow_2(v1.y - other.y);
}

void quick(point* a, int l, int r, bool flag) {
    if (flag) {
        if (l >= r) return;
        int i = l, j = r;
        point base = a[l];
        while (i < j) {
            while (a[j].x >= base.x && i < j) {
                j--;
            }
            while (a[i].x <= base.x && i < j) {
                i++;
            }
            if (i < j) {
                point temp = a[i];
                a[i] = a[j];
                a[j] = temp;
            }
        }
        a[l] = a[i];
        a[i] = base;
        quick(a, l, i - 1, true);
        quick(a, i + 1, r, true);
    }
    else {
        if (l >= r) return;
        int i = l, j = r;
        point base = a[l];
        while (i < j) {
            while (a[j].y >= base.y && i < j) {
                j--;
            }
            while (a[i].y <= base.y && i < j) {
                i++;
            }
            if (i < j) {
                point temp = a[i];
                a[i] = a[j];
                a[j] = temp;
            }
        }
        a[l] = a[i];
        a[i] = base;
        quick(a, l, i - 1, false);
        quick(a, i + 1, r, false);
    }
}

void Quicksort(point* a, int n, bool flag) {
    quick(a, 0, n - 1, flag);
}

long long solve(point *a, int l, int r) {
    // TODO: implement solve  
    if (l + 1 >= r) return INF;
    int m = (l + r) / 2;
    LL ret = min(solve(a, l, m), solve(a, m, r));
    point* v = new point[r - l];
    int j = 0;
    for (int i = l; i < r; i++) {
        if (pow_2(a[i].x-a[m].x) < ret) {
            v[j] = a[i];
            j++;
        }
    }
    Quicksort(v, j, false);
    for (int i = 0; i < j; i++) {
        for (int k = i + 1; k < j; k++) {
            if (pow_2(v[i].y - v[k].y) >= ret) break;
            ret = min(ret, distance_2(v[i],v[k]));
        }
        
    }
    return ret;
}

int main() {
    int n;
    cin >> n;
    point* a = new point[n];
    for (int i = 0; i < n; i++) {
        LL x, y;
        cin >> x >> y;
        a[i].x = x, a[i].y = y;
    }
    if (n == 2) {
        cout << distance_2(a[0],a[1]);
        return 0;
    }
    //cout << 111 << endl;
    Quicksort(a, n, true);
    cout << solve(a, 0, n);
}
